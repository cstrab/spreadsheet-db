name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose
        run: |
          # Exporting all environment variables needed
          export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          export FASTAPI_PORT=${{ secrets.FASTAPI_PORT }}
          export REACT_APP_API_HOST=${{ secrets.REACT_APP_API_HOST }}
          export REACT_APP_API_PORT=${{ secrets.REACT_APP_API_PORT }}
          export REACT_APP_PORT=${{ secrets.REACT_APP_PORT }}
          export REACT_APP_NGINX_PORT=${{ secrets.REACT_APP_NGINX_PORT }}
          docker compose up -d

  unit_tests_backend:
    needs: setup_environment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install packages in backend container
        run: |
          docker exec spreadsheet-db-backend-1 pip install coverage pytest coveralls

      - name: Run backend tests with coverage
        run: |
          docker exec spreadsheet-db-backend-1 coverage run -m pytest

      - name: Generate backend coverage report
        run: |
          docker exec spreadsheet-db-backend-1 coverage xml -o coverage-backend.xml
          docker cp spreadsheet-db-backend-1:/path/to/coverage-backend.xml ./coverage-backend.xml

  unit_tests_frontend:
      needs: setup_environment
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2
        - name: Setup Node.js environment
          uses: actions/setup-node@v2
          with:
            node-version: '19.2' 
        - name: Install dependencies
          run: npm ci --legacy-peer-deps
        - name: Run frontend tests with coverage
          run: npm test -- --coverage
        - name: Generate frontend coverage report
          run: npx lcov-result-merger 'coverage/**/*.info' > coverage-frontend.info

  merge_and_upload_coverage:
      needs: [unit_tests_backend, unit_tests_frontend]
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2
        - name: Merge coverage reports
          run: |
            # Convert XML to LCOV
            npx coverage-istanbul-libxml2lcov < coverage-backend.xml > coverage-backend.lcov
            # Merge LCOV files
            npx lcov-result-merger 'coverage-*.lcov' > coverage-final.lcov
        - name: Upload merged coverage to coveralls
          uses: coverallsapp/github-action@master
          with:
            github-token: ${{ secrets.github_token }}
            path-to-lcov: ./coverage-final.lcov

  cleanup:
    needs: [unit_tests_backend, unit_tests_frontend, merge_and_upload_coverage]
    runs-on: ubuntu-latest

    steps:
      - name: Stop Docker Compose environment
        run: docker compose down
